<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zzq.mapper.SensorMapper" >
  <resultMap id="BaseResultMap" type="com.zzq.model.Sensor" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="tags" property="tags" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="about" property="about" jdbcType="VARCHAR" />
    <result column="device_id" property="deviceId" jdbcType="INTEGER" />
    <result column="last_update" property="lastUpdate" jdbcType="INTEGER" />
    <result column="last_data" property="lastData" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    s.id, s.name, s.tags, s.type, s.about, s.device_id, s.last_update, s.last_data, s.status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sensor s
    where s.id = #{id,jdbcType=INTEGER}
  </select>
  <select id="allSensors" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from sensor s
  </select>
  <select id="findHistoryData" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
   select * from sensor s
join datapoint d on s.id = d.sensor_id where s.id=#{id}
  </select>
  <select id="selectByDeviceId"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from sensor s
    join device d on s.device_id = d.id
    where s.device_id = #{id}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sensor
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zzq.model.Sensor" >
    insert into sensor (id, name, tags, 
      type, about, device_id, 
      last_update, last_data, status
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{tags,jdbcType=VARCHAR}, 
      #{type,jdbcType=INTEGER}, #{about,jdbcType=VARCHAR}, #{deviceId,jdbcType=INTEGER}, 
      #{lastUpdate,jdbcType=INTEGER}, #{lastData,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zzq.model.Sensor" >
    insert into sensor
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="tags != null" >
        tags,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="about != null" >
        about,
      </if>
      <if test="deviceId != null" >
        device_id,
      </if>
      <if test="lastUpdate != null" >
        last_update,
      </if>
      <if test="lastData != null" >
        last_data,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="tags != null" >
        #{tags,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="about != null" >
        #{about,jdbcType=VARCHAR},
      </if>
      <if test="deviceId != null" >
        #{deviceId,jdbcType=INTEGER},
      </if>
      <if test="lastUpdate != null" >
        #{lastUpdate,jdbcType=INTEGER},
      </if>
      <if test="lastData != null" >
        #{lastData,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zzq.model.Sensor" >
    update sensor
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="tags != null" >
        tags = #{tags,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="about != null" >
        about = #{about,jdbcType=VARCHAR},
      </if>
      <if test="deviceId != null" >
        device_id = #{deviceId,jdbcType=INTEGER},
      </if>
      <if test="lastUpdate != null" >
        last_update = #{lastUpdate,jdbcType=INTEGER},
      </if>
      <if test="lastData != null" >
        last_data = #{lastData,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="update" parameterType="com.zzq.model.Sensor" >
    update sensor
    <set>
      <if test="tags != null" >
        tags = #{tags,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="about != null" >
        about = #{about,jdbcType=VARCHAR},
      </if>
      <if test="deviceId != null" >
        device_id = #{deviceId,jdbcType=INTEGER},
      </if>
      <if test="lastUpdate != null" >
        last_update = #{lastUpdate,jdbcType=INTEGER},
      </if>
      <if test="lastData != null" >
        last_data = #{lastData,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zzq.model.Sensor" >
    update sensor
    set name = #{name,jdbcType=VARCHAR},
      tags = #{tags,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      about = #{about,jdbcType=VARCHAR},
      device_id = #{deviceId,jdbcType=INTEGER},
      last_update = #{lastUpdate,jdbcType=INTEGER},
      last_data = #{lastData,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>